# we produce the final config file by passing this file through envsubst (will substitute env variables like ${HOSTNAME}, ...)
# IMPORTANT: to avoid substitution on nginx variables, use '${ESC}' on the their '$' signs
server {
    server_name         ${HOSTNAME};
    server_tokens off;
    client_max_body_size 1000M;

    listen              443 ssl;
    ssl_certificate     /etc/letsencrypt/live/${HOSTNAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${HOSTNAME}/privkey.pem;
    include             /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam         /etc/letsencrypt/ssl-dhparams.pem;

    location = /robots.txt {
        add_header  Content-Type  text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location ^~ /mqtt/ {
        proxy_pass http://mqtt:9001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_read_timeout 86400;
        proxy_set_header Host               ${ESC}host;
        proxy_set_header X-Real-IP          ${ESC}remote_addr;
        proxy_set_header X-Forwarded-Proto  ${ESC}scheme;
        proxy_set_header X-Forwarded-For    ${ESC}proxy_add_x_forwarded_for;
    }

    location ^~ /mqtt1/ {
        proxy_pass http://mqtt-br1:9001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_read_timeout 86400;
        proxy_set_header Host               ${ESC}host;
        proxy_set_header X-Real-IP          ${ESC}remote_addr;
        proxy_set_header X-Forwarded-Proto  ${ESC}scheme;
        proxy_set_header X-Forwarded-For    ${ESC}proxy_add_x_forwarded_for;
    }

    location ^~ /persist/ {
        add_header 'Access-Control-Allow-Origin' "${ESC}http_origin";
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type';
        proxy_pass http://arena-persist:8884/persist/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location ^~ /user/static/ {
        root /usr/share/nginx/html/;
    }

    location ^~ /user/ {
        add_header 'Access-Control-Allow-Origin' "${ESC}http_origin";
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type';
        proxy_pass http://arena-account:8000;
        proxy_http_version 1.1;
        proxy_set_header Host ${ESC}host;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_read_timeout 86400;
    }

    location ^~ /arts-api/ {
        proxy_pass http://arts:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_read_timeout 86400;
    }

    location ^~ /pythonrt/ {
        proxy_pass http://py-runtime:5000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_read_timeout 86400;
    }

    location ^~ /storemng/ {
        add_header 'Access-Control-Allow-Origin' "${ESC}http_origin";
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type';
        proxy_pass http://store:8080/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${ESC}http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_read_timeout 86400;
    }

    location ^~ /store/ {
        root /usr/share/nginx/html;
        autoindex on;
    }

    location ~* / {
        root /usr/share/nginx/html;
        index landing.html index.html;
        disable_symlinks off;

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type';

        add_header Content-Security-Policy "default-src 'none';
                                            script-src 'self' https://arenaxr.org 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com;
                                            connect-src 'self' blob: wss://arenaxr.org wss://*.andrew.cmu.edu wss://*.conix.io https://mr.andrew.cmu.edu https://jitsi0.andrew.cmu.edu:8443 https://jitsi1.andrew.cmu.edu https://arenaxr.org https://*.conix.io https://dl.dropboxusercontent.com https://cdn.aframe.io;
                                            img-src 'self' data: blob: https://*.conix.io https://dl.dropboxusercontent.com https://cdn.aframe.io https://aframe.io;
                                            style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net https://maxcdn.bootstrapcdn.com;
                                            base-uri 'self';
                                            form-action 'self';
                                            font-src 'self' data: https://cdn.aframe.io https://fonts.gstatic.com https://maxcdn.bootstrapcdn.com;
                                            media-src 'self' https://*.conix.io https://dl.dropboxusercontent.com https://www.youtube-nocookie.com;
                                            worker-src 'self' blob:;
                                            child-src 'self';
                                            frame-src 'self' https://www.youtube-nocookie.com;
                                            prefetch-src 'self';";

        # Staging /dev/username folders
        location ~* ^/dev {
            autoindex on;
            # Cover actual files in subdirectories of /dev/username/namespace
            location ~* ^(/dev/[\w.-]+)(/[\w.-]+)(/[\w.-]+)(/.+) {
                try_files ${ESC}uri ${ESC}uri/ ${ESC}1${ESC}3${ESC}4 ${ESC}1${ESC}3${ESC}4/ ${ESC}1${ESC}4 ${ESC}1${ESC}4/ ${ESC}1/index.html;
            }
            # Cover /dev/username/namespace/scenename and files in same path of /dev/username/namespace
            location ~* ^(/dev/[\w.-]+)(/[\w.-]+)(/[\w.-]+) {
                try_files ${ESC}uri ${ESC}uri/ ${ESC}1${ESC}3 ${ESC}3/ ${ESC}1/index.html;
            }
            # Catchall for rest of /dev/username
            location ~* ^/dev/([\w.-]+)/ {
                try_files ${ESC}uri ${ESC}uri/ /index.html;
            }
        }
        # Cover actual files in subdirectories of /namespace (e.g. /namespace/vendor/env.js)
        location ~* ^/([\w.-]+)/([\w.-]+)/(.+) {
            try_files ${ESC}uri ${ESC}uri/ /${ESC}2/${ESC}3 /${ESC}2/${ESC}3/ ${ESC}3 ${ESC}3/ /index.html;
        }
        # Cover /namespace/scenename and files in same path of /namespace (e.g. /namespace/events.js)
        location ~* ^/([\w.-]+)(/[\w.-]+) {
            try_files ${ESC}uri ${ESC}uri/ ${ESC}2 ${ESC}2/  /index.html;
        }
        # Catch all for /scenename
        location ~* / {
            try_files ${ESC}uri ${ESC}uri/ /index.html;
        }

        location ~ \.(css|html|js)$ {
            expires -1;
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        }
    }
}

server {
    listen 80;
    server_name  ${HOSTNAME};
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://${ESC}host${ESC}request_uri;
    }
}
