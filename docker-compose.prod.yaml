# this is the production docker compose; adds production config to the base docker-compose.yaml
#
# run production:
#    docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d
#
# NOTE: if -f is not given, 'docker-compose up' will use docker-compose.override.yaml (https://docs.docker.com/compose/extends/)

version: '3'

services:

  arena-web: # create a container named "arena-web"; other service containers in this file can resolve its name (arena-web)
    image: arenaxrorg/arena-web-core:${ARENA_CORE:-latest} # pulls from https://hub.docker.com/repository/docker/arenaxr/arena-web-core
    volumes:
      - ./conf/arena-web.conf:/etc/nginx/conf.d/arena-web.conf:ro # mount nginx config
      - ./store:/usr/share/nginx/html/store:ro # mount store files
      - ./conf/arena-web-conf:/usr/share/nginx/html/conf # arena client code conf
      - account-static-content:/usr/share/nginx/html/user/static:ro # serve account static files
    ports:
      - "80:80" # map port 80 on the host to port 80 on the container
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'" # reload certificates every 6h
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:rw # mount certbot files; certificate files will be here
      - ./data/certbot/www:/var/www/certbot:rw # mount certbot files;
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'" # check for certificate updates every 12h

  mongodb:
    restart: unless-stopped

  arena-persist:
    image: arenaxrorg/arena-persist:${ARENA_PERSIST:-latest} # pulls from https://hub.docker.com/repository/docker/arenaxrorg/arena-persist
    restart: unless-stopped

  arena-account:
    image: arenaxrorg/arena-account:${ARENA_ACCOUNT:-latest} # pulls from https://hub.docker.com/repository/docker/arenaxrorg/arena-account
    volumes:
      - ./conf/arena-account-settings.py:/usr/src/app/arena_account/settings.py:ro
      - account-static-content:/usr/src/app/static # static content
      - ./data/account:/usr/src/app/db # account db
    env_file:
      - .env
      - secret.env
    restart: unless-stopped

  mqtt:
    image: arenaxrorg/arena-broker:${ARENA_BROKER:-latest} # pulls from https://hub.docker.com/repository/docker/arenaxrorg/arena-broker
    ports:
      - 8083:8083/tcp # mqtt-wss
      - 8883:8883/tcp # mqtt-tls
    restart: unless-stopped

  mqtt-br1:
    image: arenaxrorg/arena-broker:${ARENA_BROKER:-latest} # pulls from https://hub.docker.com/repository/docker/arenaxrorg/arena-broker
    volumes:
      - ./conf/mosquitto-br-conn.conf:/mosquitto/config/mosquitto.conf:ro # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/keys/jwt.public.der:/pubsubkey.der:ro # pubsub key available to service
      - ./data/certbot/conf:/etc/letsencrypt:ro # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    depends_on:
      - mqtt
    restart: unless-stopped

  mqtt-br2:
    image: arenaxrorg/arena-broker:${ARENA_BROKER:-latest} # pulls from https://hub.docker.com/repository/docker/arenaxrorg/arena-broker
    volumes:
      - ./conf/mosquitto-br-conn.conf:/mosquitto/config/mosquitto.conf:ro # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/keys/jwt.public.der:/pubsubkey.der:ro # pubsub key available to service
      - ./data/certbot/conf:/etc/letsencrypt:ro # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    depends_on:
      - mqtt
    restart: unless-stopped

  store:
    # version #, settings, and full inline script from /storemng must match ./init-utils/filebrowserScriptToHash.js values
    image: "filebrowser/filebrowser:${ARENA_FILESTORE:-latest}"  # pulls from https://hub.docker.com/r/filebrowser/filebrowser

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  arena-host-stats:
    image: prom/node-exporter:latest
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  prometheus:
    image: prom/prometheus:latest
    user: "root"
    volumes:
      - ./conf/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus/:/prometheus/
    command: [ "--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--storage.tsdb.retention.time=30d" ]
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  grafana:
    image: grafana/grafana:latest
    user: "root"
    ports:
      - 3000:3000
    volumes:
      - ./data/grafana:/var/lib/grafana:rw
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=CONIX
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  restarter:
    image: docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./:/arena-docker:ro
    command: [ "/bin/sh", "-c", "cd /arena-docker; while true; do sleep 24h; docker restart arena-services-docker_py-runtime_1 arena-services-docker_orchestrator_1; done" ]
    restart: unless-stopped

volumes:
  account-static-content:
