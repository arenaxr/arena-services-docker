# this is the base docker compose
#
# run production stack (arenaxr; extend docker-compose.yaml):
#    docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d
#
# run staging stack (dev1; extend docker-compose.yaml):
#    docker-compose -f docker-compose.yaml -f docker-compose.staging.yaml up -d
#
# run local development stack (does not extend docker-compose.yaml):
#    docker-compose -f docker-compose.localdev.yaml up -d
#
# run demo stack (does not extend docker-compose.yaml):
#    docker-compose -f docker-compose.demo.yaml up -d

version: '3'

services:
  arena-web: # create a container named "arena-web"; other service containers in this file can resolve its name (arena-web)
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:ro # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - ./data/certbot/www:/var/www/certbot:ro # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
    depends_on:
      - mqtt
      - arena-persist
      - store
      - arena-account

  mongodb:
    volumes:
      - ./data/mongodb:/data/db:rw # permanent storage on the host
      - ./data/backup:/backup:rw # backup storage on the host

  arena-persist:
    user: "node"
    volumes:
      - ./conf/persist-config.json:/home/node/app/config.json:ro # mount updated config.json that uses the container name
      - ./data/keys/jwt.public.pem:/home/node/app/pubsubkey.pub:ro # pubsub public key available to service
    command: "npm run start"
    depends_on:
      - mongodb
      - mqtt

  arena-account:
    volumes:
      - ./conf/account-settings.py:/usr/src/app/arena_account/settings.py:ro      
      - account-static-content:/usr/src/app/static # static content
      - ./data/account:/usr/src/app/db # account db
      - ./data/keys/jwt.priv.pem:/home/node/app/pubsubkey.pem:ro # pubsub key available to service
    env_file:
      - .env
      - secret.env
    depends_on:
      - arena-persist
    command: "python manage.py runserver 0.0.0.0:8000"

  mqtt:
    volumes:
      - ./conf/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/keys/jwt.public.der:/pubsubkey.der:ro # pubsub key available to service
      - ./data/certbot/conf:/etc/letsencrypt:ro # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    ports:
      - 8083:8083/tcp # mqtt-wss
      - 8883:8883/tcp # mqtt-tls

  store:
    volumes:
      - ./conf/store-config.json:/.filebrowser.json:ro
      - ./store-branding:/arena-store/frontend/arena-branding:ro
      - ./store:/srv-files:rw
      - ./data/arena-store:/arena-store/data:rw
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  cadvisor:
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  arena-host-stats:
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  prometheus:
    user: "root"
    volumes:
      - ./conf/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus/:/prometheus/
    command: [ "--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--storage.tsdb.retention.time=30d" ]
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  grafana:
    user: "root"
    ports:
      - 3000:3000
    volumes:
      - ./data/grafana:/var/lib/grafana:rw
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=CONIX
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  restarter:
    image: docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./:/arena-docker:ro
    command: [ "/bin/sh", "-c", "cd /arena-docker; while true; do sleep 24h; docker restart arena-services-docker_py-runtime_1 arena-services-docker_orchestrator_1; done" ]
    restart: unless-stopped

